# app.py
import io
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# Optional exports
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

from sklearn.linear_model import LinearRegression

# ------------------ PAGE CONFIG ------------------
st.set_page_config(page_title="Coffee Sales Dashboard", layout="wide")
st.title("‚òï Coffee Sales Dashboard")

# ------------------ HELPERS ------------------
def clean_columns(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df.columns = df.columns.str.strip().str.lower()
    rename_map = {
        "cash type": "cash_type",
        "payment": "cash_type",
        "payment_method": "cash_type",
        "coffee": "coffee_name",
        "product": "coffee_name",
        "amount": "money",
        "price": "money",
        "value": "money",
        "customer": "card",
        "customer_id": "card",
    }
    df = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})
    return df

def save_fig(fig, filename: str) -> bytes:
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0)
    return buf.getvalue()

def export_excel(df_filtered, daily_sales=None, forecast_df=None) -> bytes:
    out = io.BytesIO()
    with pd.ExcelWriter(out, engine="openpyxl") as writer:
        df_filtered.to_excel(writer, sheet_name="FilteredData", index=False)
        if daily_sales is not None:
            daily_sales.to_excel(writer, sheet_name="DailySales", index=False)
        if forecast_df is not None:
            forecast_df.to_excel(writer, sheet_name="Forecast", index=False)
    out.seek(0)
    return out.getvalue()

def export_pdf(kpis: dict) -> bytes:
    buf = io.BytesIO()
    doc = SimpleDocTemplate(buf, pagesize=A4)
    styles = getSampleStyleSheet()
    elems = []
    elems.append(Paragraph("Coffee Sales Report", styles["Title"]))
    elems.append(Spacer(1, 10))
    for k, v in kpis.items():
        elems.append(Paragraph(f"{k}: {v}", styles["Normal"]))
    elems.append(Spacer(1, 10))
    elems.append(Paragraph("Generated by Coffee Sales Dashboard", styles["Italic"]))
    doc.build(elems)
    buf.seek(0)
    return buf.getvalue()

def make_forecast(daily_sales: pd.DataFrame, horizon:int = 7) -> pd.DataFrame:
    ds = daily_sales.sort_values("date").copy()
    X = np.array([d.toordinal() for d in ds["date"]]).reshape(-1, 1)
    y = ds["money"].values
    if len(ds) < 3:
        return pd.DataFrame(columns=["date", "forecast"])
    model = LinearRegression()
    model.fit(X, y)
    last_date = ds["date"].max()
    future_dates = pd.date_range(last_date + pd.Timedelta(days=1), periods=horizon, freq="D")
    X_future = np.array([d.toordinal() for d in future_dates]).reshape(-1, 1)
    y_pred = model.predict(X_future)
    forecast_df = pd.DataFrame({"date": future_dates, "forecast": y_pred})
    return forecast_df

# ------------------ FILE UPLOAD ------------------
uploaded = st.file_uploader("üìÇ Upload your coffee sales CSV", type=["csv"])

if uploaded is None:
    st.info("Upload a CSV to get started. Expected columns: date, datetime, cash_type, card, money, coffee_name")
    st.stop()

# ------------------ LOAD & VALIDATE ------------------
df = pd.read_csv(uploaded)
df = clean_columns(df)

required = ["date", "datetime", "cash_type", "card", "money", "coffee_name"]
missing = [c for c in required if c not in df.columns]
if missing:
    st.error(f"‚ùå Missing required columns: {', '.join(missing)}")
    st.write("Found columns:", list(df.columns))
    st.stop()

df["date"] = pd.to_datetime(df["date"], errors="coerce")
if "datetime" in df.columns:
    with pd.option_context("mode.chained_assignment", None):
        try:
            df["datetime"] = pd.to_datetime(df["datetime"], errors="coerce")
        except Exception:
            pass
df["money"] = pd.to_numeric(df["money"], errors="coerce")
df = df.dropna(subset=["date", "money"]).copy()

st.subheader("üìä Data Preview")
st.dataframe(df.head(20), use_container_width=True)

# ------------------ SIDEBAR FILTERS ------------------
st.sidebar.header("üîç Filters")

min_d, max_d = df["date"].min(), df["date"].max()
dr = st.sidebar.date_input("Date range", value=[min_d, max_d], min_value=min_d, max_value=max_d)
if isinstance(dr, list) and len(dr) == 2:
    start_d, end_d = pd.to_datetime(dr[0]), pd.to_datetime(dr[1])
else:
    start_d, end_d = min_d, max_d

coffee_opts = sorted(df["coffee_name"].dropna().unique().tolist())
sel_coffee = st.sidebar.multiselect("Coffee", options=coffee_opts, default=coffee_opts)

pay_opts = sorted(df["cash_type"].dropna().unique().tolist())
sel_pay = st.sidebar.multiselect("Payment type", options=pay_opts, default=pay_opts)

cards = df["card"].dropna().astype(str)
card_opts = sorted(cards.unique().tolist())
sel_cards = st.sidebar.multiselect("Customer (card id)", options=card_opts)

fdf = df[
    (df["date"] >= start_d) &
    (df["date"] <= end_d) &
    (df["coffee_name"].isin(sel_coffee)) &
    (df["cash_type"].isin(sel_pay))
].copy()
if sel_cards:
    fdf = fdf[fdf["card"].astype(str).isin(sel_cards)]

# ------------------ KPI CARDS ------------------
total_sales = float(fdf["money"].sum())
txns = int(len(fdf))
avg_txn = float(fdf["money"].mean()) if txns > 0 else 0.0
top_coffee = fdf["coffee_name"].mode()[0] if not fdf["coffee_name"].empty else "‚Äî"

c1, c2, c3, c4 = st.columns(4)
c1.metric("üí∞ Total Sales", f"‚Çπ{total_sales:,.2f}")
c2.metric("üßæ Transactions", f"{txns:,}")
c3.metric("üí≥ Avg / Txn", f"‚Çπ{avg_txn:,.2f}")
c4.metric("‚≠ê Top Coffee", top_coffee)

st.markdown("---")

# ------------------ CHARTS ------------------
st.subheader("üìà Daily Sales")
daily = fdf.groupby("date", as_index=False)["money"].sum().sort_values("date")

fig1, ax1 = plt.subplots(figsize=(10, 4))
sns.lineplot(data=daily, x="date", y="money", marker="o", ax=ax1)
ax1.set_xlabel("Date")
ax1.set_ylabel("Sales (‚Çπ)")
ax1.set_title("Daily Sales Trend")
st.pyplot(fig1)
st.download_button("‚¨áÔ∏è Download Daily Sales (PNG)", save_fig(fig1, "daily.png"),
                   file_name="daily_sales.png", mime="image/png")

st.subheader("‚òï Coffee Popularity (Count)")
fig2, ax2 = plt.subplots(figsize=(10, 4))
order_coffee = fdf["coffee_name"].value_counts().index
sns.countplot(data=fdf, x="coffee_name", order=order_coffee, ax=ax2)
ax2.set_xlabel("Coffee")
ax2.set_ylabel("Count")
ax2.set_title("Sales Count by Coffee")
plt.setp(ax2.get_xticklabels(), rotation=45, ha="right")
st.pyplot(fig2)

st.subheader("üí≥ Payment Method Distribution")
fig3, ax3 = plt.subplots(figsize=(6, 6))
fdf["cash_type"].value_counts().plot.pie(autopct="%1.1f%%", startangle=90, ax=ax3)
ax3.set_ylabel("")
ax3.set_title("Payment Type Share")
st.pyplot(fig3)

st.subheader("üî• Heatmap: Coffee √ó Payment (‚Çπ)")
pivot = fdf.pivot_table(index="coffee_name", columns="cash_type",
                        values="money", aggfunc="sum", fill_value=0)
fig4, ax4 = plt.subplots(figsize=(10, 6))
sns.heatmap(pivot, annot=True, fmt=".0f", ax=ax4, cmap="YlGnBu")
ax4.set_xlabel("Payment Type")
ax4.set_ylabel("Coffee")
ax4.set_title("Revenue Heatmap (‚Çπ)")
st.pyplot(fig4)

st.subheader("üë§ Top Customers (by Spend)")
top_n = fdf.groupby("card", as_index=False)["money"].sum().sort_values("money", ascending=False).head(10)
fig5, ax5 = plt.subplots(figsize=(10, 4))
sns.barplot(data=top_n, x="card", y="money", ax=ax5)
ax5.set_xlabel("Customer (card id)")
ax5.set_ylabel("Sales (‚Çπ)")
ax5.set_title("Top 10 Customers by Spend")
plt.setp(ax5.get_xticklabels(), rotation=45, ha="right")
st.pyplot(fig5)

# ------------------ FORECAST ------------------
st.subheader("üîÆ Forecast")
colF1, colF2 = st.columns(2)
horizon = colF1.selectbox("Forecast horizon (days)", [7, 14, 30], index=0)
colF2.caption("Uses a simple linear regression over daily totals.")

if len(daily) >= 3:
    fc = make_forecast(daily.rename(columns={"money": "money"}), horizon=horizon)
    fig6, ax6 = plt.subplots(figsize=(10, 4))
    ax6.plot(daily["date"], daily["money"], label="History")
    ax6.plot(fc["date"], fc["forecast"], linestyle="--", label="Forecast")
    ax6.set_xlabel("Date")
    ax6.set_ylabel("Sales (‚Çπ)")
    ax6.set_title(f"{horizon}-Day Sales Forecast")
    ax6.legend()
    st.pyplot(fig6)
else:
    st.warning("Not enough data points to build a forecast (need at least 3 days).")
    fc = None

# ------------------ EXPORTS ------------------
st.subheader("üìÇ Export Data & Reports")
cExp1, cExp2, cExp3 = st.columns(3)

csv_bytes = fdf.to_csv(index=False).encode("utf-8")
cExp1.download_button("‚¨áÔ∏è Download Filtered CSV", data=csv_bytes,
                      file_name="filtered_coffee_sales.csv", mime="text/csv")

excel_bytes = export_excel(fdf, daily_sales=daily, forecast_df=fc)
cExp2.download_button("‚¨áÔ∏è Download Excel Report", data=excel_bytes,
                      file_name="coffee_sales_report.xlsx",
                      mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

kpi_text = {
    "Total Sales": f"‚Çπ{total_sales:,.2f}",
    "Transactions": f"{txns:,}",
    "Average per Transaction": f"‚Çπ{avg_txn:,.2f}",
    "Top Coffee": top_coffee,
    "Date Range": f"{start_d.date()} ‚Üí {end_d.date()}",
}
pdf_bytes = export_pdf(kpi_text)
cExp3.download_button("‚¨áÔ∏è Download PDF Summary", data=pdf_bytes,
                      file_name="coffee_sales_summary.pdf", mime="application/pdf")
